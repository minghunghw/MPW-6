/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2022  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD -words 4096 -bits 8 -frequency 1 -ring_width 2.0 -mux 16 -write_mask off -wp_size 8 -top_layer met4 -power_type rings -horiz met3 -vert met4 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -asvm on -libname USERLIB -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD
 *      Words:          4096
 *      Word Width:     8
 *      Mux:            16
 *      Corner:        tt_1p2v_25c
 *
 *      Creation Date:  2022-02-17 00:08:34Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2022-02-17 00:08:34Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2022 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.200;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.000;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(tt_1p2v_25c) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.200;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : tt_1p2v_25c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(RA1SHD_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RA1SHD_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RA1SHD_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(RA1SHD_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RA1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 12;
		bit_from : 11;
		bit_to : 0 ;
		downto : true ;
	}
cell(RA1SHD) {
	area		 : 124433.508;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 12;
		word_width : 8;
	}
        bus(Q)   {
                bus_type : RA1SHD_DATA;
		direction : output;
		max_capacitance : 0.960;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(RA1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.025, 0.050, 0.125, 0.250, 0.500, 0.960");
                        values ( \
                          "4.001, 4.023, 4.045, 4.112, 4.222, 4.444, 4.851", \
                          "4.018, 4.040, 4.062, 4.129, 4.239, 4.461, 4.868", \
                          "4.039, 4.062, 4.084, 4.150, 4.261, 4.482, 4.890", \
                          "4.082, 4.104, 4.127, 4.193, 4.304, 4.525, 4.932", \
                          "4.168, 4.190, 4.212, 4.279, 4.389, 4.611, 5.018", \
                          "4.339, 4.361, 4.383, 4.450, 4.561, 4.782, 5.189", \
                          "4.425, 4.447, 4.469, 4.535, 4.646, 4.868, 5.275" \
                        )
                        }
                        rise_transition(RA1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.025, 0.050, 0.125, 0.250, 0.500, 0.960");
                        values ("0.044, 0.085, 0.126, 0.249, 0.454, 0.864, 1.618")
                        }
                        cell_fall(RA1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.025, 0.050, 0.125, 0.250, 0.500, 0.960");
                        values ( \
                          "4.001, 4.023, 4.045, 4.112, 4.222, 4.444, 4.851", \
                          "4.018, 4.040, 4.062, 4.129, 4.239, 4.461, 4.868", \
                          "4.039, 4.062, 4.084, 4.150, 4.261, 4.482, 4.890", \
                          "4.082, 4.104, 4.127, 4.193, 4.304, 4.525, 4.932", \
                          "4.168, 4.190, 4.212, 4.279, 4.389, 4.611, 5.018", \
                          "4.339, 4.361, 4.383, 4.450, 4.561, 4.782, 5.189", \
                          "4.425, 4.447, 4.469, 4.535, 4.646, 4.868, 5.275" \
                        )
                        }
                        fall_transition(RA1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.025, 0.050, 0.125, 0.250, 0.500, 0.960");
                        values ("0.070, 0.115, 0.161, 0.296, 0.523, 0.975, 1.808")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.135;
                clock : true;
                max_transition : 1.000;
                min_pulse_width_high : 0.161 ;
                min_pulse_width_low  : 0.343 ;
                min_period           : 4.194 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RA1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("48.269, 48.269")
                        }
                        fall_power(RA1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RA1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("44.679, 44.679")
                        }
                        fall_power(RA1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(RA1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.018, 0.018")
                        }
                        fall_power(RA1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.665, 0.681, 0.701, 0.740, 0.818, 0.975, 1.053", \
                          "0.648, 0.664, 0.684, 0.723, 0.801, 0.958, 1.036", \
                          "0.627, 0.643, 0.662, 0.701, 0.780, 0.936, 1.015", \
                          "0.584, 0.600, 0.619, 0.658, 0.737, 0.893, 0.972", \
                          "0.498, 0.514, 0.534, 0.573, 0.651, 0.808, 0.886", \
                          "0.327, 0.343, 0.362, 0.402, 0.480, 0.637, 0.715", \
                          "0.242, 0.257, 0.277, 0.316, 0.394, 0.551, 0.629" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.622, 0.636, 0.654, 0.689, 0.760, 0.902, 0.973", \
                          "0.605, 0.619, 0.637, 0.672, 0.743, 0.885, 0.956", \
                          "0.583, 0.597, 0.615, 0.651, 0.722, 0.864, 0.935", \
                          "0.540, 0.555, 0.572, 0.608, 0.679, 0.821, 0.892", \
                          "0.455, 0.469, 0.487, 0.522, 0.593, 0.735, 0.806", \
                          "0.284, 0.298, 0.316, 0.351, 0.422, 0.564, 0.635", \
                          "0.198, 0.212, 0.230, 0.265, 0.336, 0.478, 0.549" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.171, 0.155, 0.136, 0.096, 0.018, 0.000, 0.000", \
                          "0.256, 0.241, 0.221, 0.182, 0.104, 0.000, 0.000" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.004, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.089, 0.075, 0.057, 0.022, 0.000, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.010;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.509, 0.525, 0.546, 0.586, 0.666, 0.828, 0.908", \
                          "0.492, 0.508, 0.528, 0.569, 0.649, 0.811, 0.891", \
                          "0.471, 0.487, 0.507, 0.547, 0.628, 0.789, 0.870", \
                          "0.428, 0.444, 0.464, 0.504, 0.585, 0.746, 0.827", \
                          "0.342, 0.358, 0.379, 0.419, 0.499, 0.661, 0.741", \
                          "0.171, 0.187, 0.207, 0.248, 0.328, 0.489, 0.570", \
                          "0.085, 0.102, 0.122, 0.162, 0.243, 0.404, 0.484" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.685, 0.699, 0.717, 0.753, 0.824, 0.966, 1.037", \
                          "0.668, 0.682, 0.700, 0.736, 0.807, 0.949, 1.020", \
                          "0.647, 0.661, 0.679, 0.714, 0.785, 0.927, 0.998", \
                          "0.604, 0.618, 0.636, 0.671, 0.742, 0.884, 0.955", \
                          "0.518, 0.533, 0.550, 0.586, 0.657, 0.799, 0.870", \
                          "0.347, 0.361, 0.379, 0.415, 0.485, 0.627, 0.698", \
                          "0.261, 0.276, 0.293, 0.329, 0.400, 0.542, 0.613" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : RA1SHD_ADDRESS;
                direction : input;
                capacitance : 0.027;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.722, 0.734, 0.749, 0.778, 0.837, 0.956, 1.015", \
                          "0.705, 0.717, 0.731, 0.761, 0.820, 0.939, 0.998", \
                          "0.683, 0.695, 0.710, 0.740, 0.799, 0.917, 0.977", \
                          "0.641, 0.652, 0.667, 0.697, 0.756, 0.875, 0.934", \
                          "0.555, 0.567, 0.582, 0.611, 0.670, 0.789, 0.848", \
                          "0.384, 0.395, 0.410, 0.440, 0.499, 0.618, 0.677", \
                          "0.298, 0.310, 0.325, 0.354, 0.414, 0.532, 0.591" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.287, 0.298, 0.311, 0.338, 0.392, 0.500, 0.554", \
                          "0.270, 0.281, 0.294, 0.321, 0.375, 0.483, 0.537", \
                          "0.248, 0.259, 0.273, 0.300, 0.354, 0.462, 0.516", \
                          "0.206, 0.216, 0.230, 0.257, 0.311, 0.419, 0.473", \
                          "0.120, 0.131, 0.144, 0.171, 0.225, 0.333, 0.387", \
                          "-0.051, -0.041, -0.027, -0.000, 0.054, 0.162, 0.216", \
                          "-0.137, -0.126, -0.113, -0.086, -0.032, 0.076, 0.130" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.049, 0.037, 0.023, 0.000, 0.000, 0.000, 0.000", \
                          "0.221, 0.209, 0.194, 0.164, 0.105, 0.000, 0.000", \
                          "0.306, 0.294, 0.279, 0.250, 0.191, 0.072, 0.013" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.014, 0.003, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.057, 0.046, 0.032, 0.005, 0.000, 0.000, 0.000", \
                          "0.142, 0.132, 0.118, 0.091, 0.037, 0.000, 0.000", \
                          "0.314, 0.303, 0.289, 0.262, 0.208, 0.100, 0.046", \
                          "0.399, 0.388, 0.375, 0.348, 0.294, 0.186, 0.132" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(RA1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.277, 0.277")
                        }
                        fall_power(RA1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.277, 0.277")
                        }
                }
        }
        bus(D)   {
                bus_type : RA1SHD_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.002;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.422, 0.437, 0.454, 0.490, 0.562, 0.705, 0.776", \
                          "0.405, 0.420, 0.437, 0.473, 0.545, 0.688, 0.759", \
                          "0.384, 0.398, 0.416, 0.452, 0.523, 0.666, 0.738", \
                          "0.341, 0.355, 0.373, 0.409, 0.480, 0.623, 0.695", \
                          "0.255, 0.270, 0.288, 0.323, 0.395, 0.538, 0.609", \
                          "0.084, 0.098, 0.116, 0.152, 0.223, 0.366, 0.438", \
                          "-0.002, 0.013, 0.031, 0.066, 0.138, 0.281, 0.352" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.286, 0.301, 0.318, 0.354, 0.424, 0.566, 0.636", \
                          "0.269, 0.283, 0.301, 0.336, 0.407, 0.549, 0.619", \
                          "0.248, 0.262, 0.280, 0.315, 0.386, 0.527, 0.598", \
                          "0.205, 0.219, 0.237, 0.272, 0.343, 0.484, 0.555", \
                          "0.119, 0.134, 0.151, 0.187, 0.257, 0.399, 0.469", \
                          "-0.052, -0.038, -0.020, 0.015, 0.086, 0.227, 0.298", \
                          "-0.137, -0.123, -0.106, -0.070, 0.000, 0.142, 0.213" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.029, 0.015, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.115, 0.101, 0.083, 0.047, 0.000, 0.000, 0.000" \
                        )
                        }
                        fall_constraint(RA1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.066, 0.052, 0.035, 0.000, 0.000, 0.000, 0.000", \
                          "0.238, 0.224, 0.206, 0.171, 0.100, 0.000, 0.000", \
                          "0.323, 0.309, 0.292, 0.256, 0.185, 0.044, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 3.14E-4;
}
}
